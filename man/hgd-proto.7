.\" Copyright (c) 2011 Edd Barrett <vext01@gmail.com>
.\" Copyright (c) 2011 Martin Ellis <ellism88@gmail.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\" [[[[[ DONT FORGET TO BUMP THE DATE WHEN YOU MAKE AMMENDMENTS ]]]]]
.\"
.Dd October 10, 2011
.Dt HGD-PROTO 7
.Os
.Sh NAME
.Nm hgd-proto
.Nd HGD protocol specification
.Sh DESCRIPTION
.Nm
is a comprehensive guide to the Hackathon Gunther Daemon protocol. The guide is
provided so as to encourage the implementation new client programs.
.Sh PROTOCOL FUNDAMENTALS
The HGD protocol is a simple mixed text/binary TCP network protocol for use with
.Xr hgd-netd 1
\&. The default TCP port for the HGD protocol is 6633.
.Pp
The majority of communications are performed in a turn based fashion
between the server and client. Most communications are line
based and terminated with a carriage return and line feed, so as to
remain telnet compatible. The only exception to this rule is the
.Sq q
command which involves sending binary data over the wire; in this case,
communications are precisely bounded in size.
.Pp
Communications start with the server
reporting it's version; the session mostly continues as follows:
.Bl -enum
.It
Client sends a command and optionally arguments separated by pipe characters.
.It
Server sends either a single- or multi-line reply indicating
success/failure and optionally some data.
.It
Goto 1 (unless the client sent a
.Sq bye
).
.El
.Pp
Clients must be aware which commands return which kind of reply.
.Pp
A server reply may contain multiple fields of data, which are
separated by the pipe character,
.Sq |
\&.
.Pp
The first field of every reply always indicates whether the command
succeeded or failed (
.Sq ok
and
.Sq err
respectively). If a command fails, then the
second field indicates why. Failed commands always send a single-line reply.
.Pp
If the client sends three consecutive commands which all cause an error, the
client connection is assumed to be malicious and is dropped, after sending
an error reply
.Sq err | Catch you later d00d!
.Sh PROTOCOL COMMANDS
All command arguments are separated by the pipe character,
.Sq |
\&.
.Pp
Some commands require the connection to be authenticated.
.Pp
For readability, we put spaces around reply and argument fields in this
document. In reality arguments and reply fields have no spaces before and after
the pipe separator (unless the spaces are part of actual data).
.Pp
The command set is as follows:
.Bl -tag -width Ds
.It bye
.Bl -dash
.It
Arguments: 0
.It
Reply type: single-line
.It
On success returns: ok | <exit_message>
.It
Needs auth: No
.It
Needs admin: No
.El
.Pp
Notifies the server that you (the client) are now disconnecting. This
allows the server to clean up properly.
.It encrypt
.Bl -dash
.It
Arguments: 0
.It
Reply type: single-line
.It
On success returns: ok
.It
Needs auth: No
.It
Needs admin: No
.El
.Pp
Notifies the server that all communications from here onward are to encrypted
using SSL (TLSv1). Transport of encrypted traffic differs; see
.Sx SECURE COMMUNICATIONS WITH SSL (TLSv1)
\&.
.It encrypt?
.Bl -dash
.It
Arguments: 0
.It
Reply type: single-line
.It
On success returns: ok | <crypto-method>
.It
Needs auth: No
.It
Needs admin: No
.El
.Pp
Asks the server if it supports encryption. A <crypto-method> of
.Sq nocrypto
indicates the server is incapable of supplying secure communications.
.It id
.Bl -dash
.It
Arguments: 0
.It
Reply type: single-line
.It
On success returns: ok | <username> | <permission_mask> | <voted?>
.It
Needs auth: Yes
.It
Needs admin: No
.El
.Pp
Requests information about your user account.
.Pp
<username> is obvious.
.Pp
<permission_mask> is a 16-bit unsigned bit-field describing the user's
permissions. Thus far only the low bit is used (0x1), which indicates admin
rights. We reserve the remaining 15 bits for future use.
.Pp
<voted?> is a boolean field indicating whether the user has used their vote on
the currently playing item.
.It ls
.Bl -dash
.It
Arguments: 0
.It
Reply type: multi-line
.It
On success returns: ok | <num-items> ...
.It
Needs auth: No
.It
Needs admin: No
.El
.Pp
Requests the playlist. <num_items> indicates how many further lines to expect
from the server. Each line returned represents one track in the playlist; the
line is of the form:
.Pp
<track-id> | <filename> | <artist> | <title> | <user> | <album> | <genre>
| <duration> | <bitrate> | <samplerate> | <channels> | <year> | <votesneeded>
| <voted?>
.Pp
<votesneed> is the number of votes now needed to skip the song.
.Pp
<voted> applies
only to the currently playing song and is 1 if the currently logged in user
has voted the song off. It is 0 if no user is authenticated.
In the event of missing tag information, string fields (artist, title, ...)
are blank and unknown integer fields (samplerate, duration, ...) are set to 0.
.It np
.Bl -dash
.It
Arguments: 0
.It
Reply type: single-line
.It
On success returns:
ok | <playing?> [| <track-id> | <filename> | <artist> | <title> | <user> |
<album> | <genre> | <duration> | <bitrate> | <samplerate> | <channels> | <year>
| <votesneeded> | <voted?>]
.Pp
.It
Needs auth: No
.It
Needs admin: No
.El
.Pp
Get the currently playing item, if any. If <playing?> = 0, then nothing
is playing and therefore, no further information is available. 
.Pp
<votesneed> is the number of votes now needed to skip the song.
.Pp
<voted> is 1 if 
the currently logged in user has voted the song off. It is 0 if no user is 
authenticated.
.Pp
In the
event of missing tag information, string fields (artist, title, ...) are
blank and unknown integer fields (samplerate, duration, ...) are set to
0.
.It proto
.Bl -dash
.It
Arguments: 0
.It
Reply type: single-line
.It
On success returns: ok | <proto-major-vers> | <proto-minor-vers>
.It
Needs auth: No
.It
Needs admin: No
.El
.Pp
Requests the protocol major and minor versions.
.Pp
The HGD developers bump the major version when backward compatibility is broken
with the existing protocol version. A client should never attempt to work with a
server implementing a differing major HGD protocol version.
.Pp
New features that do not break backward compatibility of the existing
protocol cause a minor bump. Clients should check that server's minor
version is atleast that expected, otherwise there is the possibility
that the client requests a feature which does not exist.
.It q
.Bl -dash
.It
Arguments: 2 <filename> | <byte-sz>
.It
Reply type: special
.It
Needs auth: Yes
.It
Needs admin: No
.El
.Pp
Indicates that a file of size <byte-sz> is to be uploaded. If the
file size is within bounds, then the server replies
.Sq ok | ...
, which prompts the client to send the file in binary mode. The client
should send exactly <byte-sz> bytes. If this goes to plan then the
server switches back to text-mode and sends
.Sq ok
\&. The file is inserted into the
playlist under the name <flename>.
.It user
.Bl -dash
.It
Arguments: 2 <username> | <password>
.It
Reply type: single-line
.It
On success returns: ok
.It
Needs auth: No
.It
Needs admin: No
.El
.Pp
Authenticates a user with the current connection.
.It vo
.Bl -dash
.It
Arguments: 0
.It
Reply type: single-line
.It
On success returns: ok
.It
Needs auth: Yes
.It
Needs admin: No
.El
.Pp
Votes off the currently playing track. It is recommended that clients use the
1-argument variant of this command to avoid race conditions in voting off.
.It vo (safe variant)
.Bl -dash
.It
Arguments: 1 <playlist-id>
.It
Reply type: single-line
.It
On success returns: ok
.It
Needs auth: Yes
.It
Needs admin: No
.El
.Pp
Votes off the track with the playlist id <playlist-id> if and only if it is
now playing.
.It user-add
.Bl -dash
.It
Arguments: 2 <username> <password>
.It
Reply type: single-line
.It
On success returns: ok
.It
Needs auth: Yes
.It
Needs admin: Yes
.El
.Pp
Adds a user to the system.
.It user-del
.Bl -dash
.It
Arguments: 1 <username>
.It
Reply type: single-line
.It
On success returns: ok
.It
Needs auth: Yes
.It
Needs admin: Yes
.El
.Pp
Remove a user from the system.
.It user-list
.Bl -dash
.It
Arguments: 0
.It
Reply type: multi-line
.It
On success returns: ok | <num-items> ...
.It
Needs auth: Yes
.It
Needs admin: Yes
.El
.Pp
List all users on the system. XXX: finish this
.It user-mkadmin
.Bl -dash
.It
Arguments: 1 <username>
.It
Reply type: single-line
.It
On success returns: ok
.It
Needs auth: Yes
.It
Needs admin: Yes
.El
.Pp
Grant a user admin rights (commands marked "Needs admin: Yes").
.It user-noadmin
.Bl -dash
.It
Arguments: 0
.It
Reply type: single-line
.It
On success returns: ok
.It
Needs auth: Yes
.It
Needs admin: Yes
.El
.Pp
Revoke admin rights from a user.
.It pause
.Bl -dash
.It
Arguments: 0
.It
Reply type: single-line
.It
On success returns: ok
.It
Needs auth: Yes
.It
Needs admin: Yes
.El
.Pp
Pauses/Un-pauses the current playing track
.It skip
.Bl -dash
.It
Arguments: 0
.It
Reply type: singe-line
.It
On success returns: ok
.It
Needs auth: Yes
.It
Needs admin: Yes
.El
.Pp
Skip the current playing track.
.El
.Sh TYPICAL SESSION
Here we will demonstrate a simple HGD session. In these examples, a line
beginning
.Sq >
indicate that the line is sent my the client, whereas a line beginning
.Sq <
indicates that it is a reply sent by the server.
.Bl -enum
.It
Opening the connection and checking protocol version
.Bd -literal
< ok|HGD-0.5.0
> proto
< ok|7|0
.Ed
.Pp
At this stage the client should check the protocol major and minor versions as
described above (see 'proto' command).
.It
Retrieving the playlist
.Bd -literal
> ls
< ok|3
< 10|10.MX.ogg|Deftones|MX|edd|Around the Fur|Metal|2238|192|44100|2|1997
< 11|01-Dracula_With_Glasses.ogg|Burnt By The Sun|Dracula With Glasses|edd|Soundtrack To The Personal Revolution|Metal|106|192|44100|2|2002
< 12|02-Soundtrack_To_The_Worst_Movie_Ever.ogg|Burnt By The Sun|Soundtrack To The Worst Movie Ever|edd|Soundtrack To The Personal Revolution|Metal|152|192|44100|2|2002
.Ed
.It
Disconnecting
.Bd -literal
> bye
< ok|Catch you later d00d!
.Ed
.El
.Sh SECURE COMMUNICATIONS WITH SSL (TLSv1)
A typical SSL session should go:
.Bd -literal
> encrypt?
< ok|tls1
> encrypt
**ALL traffic should now be encrypted**
< ok
> ls
< ...
.Ed
.Pp
SSL messages should all be 256 chars long (if message is shorter it should be
padded with nulls).
.Pp
If 'encrypt?' returns 'ok|nocrypto', the server does not support SSL.
If the server has encryption set to "forced", most commands will not work until
an encrypted session is set up ('encrypt?' and 'encrypt' will always work
unencrypted).
.Pp
Currently only TLSv1 is supported and certificates are not yet checked
,so authentication (ie. identity) of the server cannot be trusted.
.Sh AUTHORS
.An -nosplit
.Nm
was written by
.An Edd Barrett Aq vext01@gmail.com ,
and
.An Martin Ellis Aq ellism88@gmail.com .
.Sh BUGS
Please report bugs in this guide back to use via the github issue tracker.
